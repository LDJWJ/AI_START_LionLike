# -*- coding: utf-8 -*-
"""total_colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gr9ILV9j-fhYNAqS7ZoP6phPha1-y5dG

## Image 생성

## 코랩으로 구글드라이브에 있는 데이터 가져와서 사용하는 방법

- 바로 아래에 있는건 실행하지 마세요.
"""

# 이건 실행하지 마세요.
# from IPython.display import Image
# Image('drive.PNG')

"""#### 공유문서함에 IMAGES_SEOULIT에서 내 드라이브 추가 해줌
- 아래에 있는 코드를 실행해서 구글 드라이브 연결해줌
"""

from google.colab import drive
drive.mount('/content/drive')

"""- rood_dir 같은 경우는 다 설정해놔서 그대로 두시면 됩니다."""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
from PIL import Image
import os, glob
from sklearn import model_selection
from sklearn.model_selection import train_test_split

root_dir = './drive/My Drive/IMAGES_SEOULIT/' # 경로 설정
cat = ['Train', 'Car', 'Truck', 'Ship', 'MotorBike', 'HotAirBalloon', 'Helicopter', 'Bus', 'Bicycle', 'Airplane'] # 카테고리 설정
nb_classes = len(cat)

image_width = 64
image_height = 64

X = []
Y = []

for idx, category in enumerate(cat):
    image_dir = root_dir + category
    image_format =['jpg', 'png'] # 이미지 확장자 추가
    for img_format in image_format:
        files = glob.glob(image_dir + "/" + '*.{}'.format(img_format))
        print(image_dir + '/' + '*.{}'.format(img_format))
        for i, f in enumerate(files):
            img = Image.open(f)
            img = img.convert('RGB')
            img = img.resize((image_width, image_height))
            data = np.asarray(img)
            X.append(data)
            Y.append(idx)
        
X = np.array(X)
Y = np.array(Y)
X.shape, Y.shape
# png파일의 경우 파일이 깨져있어서 에러가 뜰 때가 있는데 그럴때는 미련없이 파일을 삭제해주세요!!

X_train, X_test, Y_train, Y_test = train_test_split(X, Y)
xy = (X_train, X_test, Y_train, Y_test)

np.save(root_dir + "transport.npy", xy)

"""## Model Learning"""

## 사용할 모델 라이브러리 import
import sys, os
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Activation
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers import Dense
from keras.utils import np_utils
import numpy as np

#%%
# root_dir = "./download/"
# categories = ["car",'truck'] # 카테고리 설정
# nb_classes = len(categories)
image_size = 64

def load_dataset():
    x_train, x_test, y_train, y_test = np.load(root_dir + "transport.npy", allow_pickle=True)
    x_train = x_train.astype("float") / 256
    x_test = x_test.astype("float") / 256
    y_train = np_utils.to_categorical(y_train, nb_classes)
    y_test = np_utils.to_categorical(y_test, nb_classes)
#     print(x_train,y_train)
    return x_train, x_test, y_train, y_test

def build_model(in_shape):
    model = Sequential()
    model.add(Convolution2D(32, 3, 3, border_mode='Same',
    input_shape=in_shape))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2,2)))
    model.add(Dropout(0.25)) # dropout
    model.add(Convolution2D(64, 3, 3, border_mode='same'))
    model.add(Activation('relu'))
    model.add(Convolution2D(64, 3, 3))
    model.add(MaxPooling2D(pool_size=(2,2)))
    # dropout
    model.add(Flatten())
    model.add(Dense(512))
    model.add(Activation('relu'))
    # dropout
    model.add(Dense(nb_classes))
    model.add(Activation('softmax'))
    model.compile(loss='binary_crossentropy',
    optimizer='rmsprop',
    metrics=['accuracy'])
    return model

# 모델 학습을 수행하고 저장된 모델을 파일로 저장 (3)
def model_train(x, y):
    model = build_model(x.shape[1:])
    model.fit(x, y, batch_size=32, epochs=30)
    return model

def model_eval(model, x, y):
    score = model.evaluate(x, y)
    print('loss=', score[0])
    print('accuracy=', score[1])

x_train, x_test, y_train, y_test = load_dataset()
model = model_train(x_train, y_train)
model_eval(model, x_test, y_test)

model.save(root_dir + "transport_model.h5")

"""## Model Test"""

import sys, os
from keras.models import Sequential
from keras.layers import Convolution2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.utils import np_utils
from keras.models import load_model
from PIL import Image
import numpy as np

# root_dir = "./download/"

test_dir = root_dir + 'Test_img/'
file_list = os.listdir(test_dir)

image_files =[]
for i in file_list:
    asd = root_dir +'Test_img/' + i
    image_files.append(asd)

image_size = 64
nb_classes = len(image_files)
categories = ['Train', 'Car', 'Truck', 'Ship', 'MotorBike', 'HotAirBalloon', 'Helicopter', 'Bus', 'Bicycle', 'Airplane']

X = []
files = []
# 이미지 불러오기 (2)
for fname in image_files:
    print(fname)
    img = Image.open(fname)
    img = img.convert("RGB")
    img = img.resize((image_size, image_size))
    in_data = np.asarray(img)
    in_data = in_data.astype("float") / 256
    X.append(in_data)
    files.append(fname)
print(X)
print(files)

X = np.array(X)
# 모델 파일 읽어오기 (3)
model = load_model(root_dir + 'transport_model.h5')
# 예측 실행 (4)
pre = model.predict(X)
# 예측 결과 출력 (5)
for i, p in enumerate(pre):
    y = p.argmax()
    print("입력:", files[i])
    print("예측:", "[", y, "]", categories[y], "/ Score",p[y])

